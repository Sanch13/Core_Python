"""В других языках словари могут называться ассоциативными массивами, хешами или хеш-таблицей.
В Python словарь также принято называть dict. Создаем словарь с помощью {}
Чтобы создать словарь, нужно заключить в фигурные скобки ({}) разделенные запятыми
пары ключ : значение. Самым простым словарем является пустой словарь, не содержащий
ни ключей, ни значений.
Некоторым людям не нравится печатать так много фигурных скобок и кавычек.
И вы можете создать словарь, передав именованные аргументы и значения в функцию dict().
Традиционный способ создания словаря:
acme_customer = {'first': 'Wile', 'middle': 'E', 'last': 'Coyote'}
{'first': 'Wile', 'middle': 'E', 'last': 'Coyote'}
С использованием dict():
acme_customer = dict(first="Wile", middle="E", last="Coyote")
{'first': 'Wile', 'middle': 'E', 'last': 'Coyote'}
Одним из ограничений второго способа является то, что имена аргументов должны представлять
собой корректные имена переменных (в них не должны использоваться пробелы и ключевые слова):
x = dict(name="Elmer", def="hunter")
File "<stdin>", line 1
x = dict(name="Elmer", def="hunter")
                        ^
SyntaxError: invalid syntax
"""
some_pythons = {'Graham': 'Chapman', 'John': 'Cleese', 'Eric': 'Idle'}
"""Лучше всего использовать специальную функцию словаря get(). Вы указываете словарь, ключ и 
опциональное значение. Если ключ существует, вы получите связанное с ним значение:"""
some_pythons.get('John')  # --> 'Cleese'
"""Если такого ключа нет, вы получите опциональное значение:
some_pythons.get('Groucho', 'Not a Python')  # 'Not a Python'
В противном случае вам будет возвращен объект None (интерактивный интерпретатор ничего не выведет):
some_pythons.get('Groucho')  # None
"""
some_pythons.get('Groucho')  # None
list(some_pythons.keys())  # ['Graham', 'John', 'Eric']
list(some_pythons.values())  # ['Chapman', 'Cleese', 'Idle']
list(some_pythons.items())  # [('Graham', 'Chapman'), ('John', 'Cleese'), ('Eric', 'Idle')]
"""В версиях Python 3.5 и выше есть новый способ объединять словари с помощью конструкции ** """
first = {'a': 'agony', 'b': 'bliss'}
second = {'b': 'bagels', 'c': 'candy'}
result = {**first, **second}  # {'a': 'agony', 'b': 'bagels', 'c': 'candy'}
"""Фактически вы можете передать в качестве параметров больше двух словарей"""
third = {'d': 'donuts'}
result2 = {**first, **third, **second}  # {'a': 'agony', 'b': 'bagels', 'd': 'donuts', 'c': 'candy'}
"""Объединяем словари с помощью функции update()"""
f = {'a': 1, 'b': 2}
s = {'c': 3}
f.update(s)  # {'a': 1, 'b': 2, 'c': 3}
"""Если во втором словаре будут находиться такие же ключи, что и в первом? Победит значение 
из второго словаря"""
ft = {'a': 1, 'b': 2}
sd = {'b': 'platypus'}
ft.update(sd)  # {'a': 1, 'b': 'platypus'}
"""Удаляем элементы по их ключу с помощью оператора del"""
del ft["a"]  # {'b': 'platypus'}
"""Получаем элемент по ключу и удаляем его с помощью функции pop(). В этой функции объединены 
функции get() и del. Если вы передадите функции pop() ключ в качестве аргумента и такой 
ключ имеется в словаре, она вернет соответствующее значение и удалит пару. Если ключа в 
словаре нет, будет сгенерировано исключение"""
pythons = {'Chapman': 'Graham', 'Cleese': 'John', 'Gilliam': 'Terry'}
pythons.pop('Chapman')  # Останется {'Cleese': 'John', 'Gilliam': 'Terry',}
"""Но если вы передадите функции pop() второй аргумент по умолчанию, словарь не изменится. 
Если такого ключа нет в словаре вернет второе установленное значение"""
pythons.pop('Chapman', None)  # None
"""Удаляем все элементы с помощью функции clear(). Чтобы удалить все ключи и значения из словаря,
вам следует использовать функцию clear() или просто переназначить заданному имени пустой словарь"""
pythons.clear()  # {}
pythons = {}  # {}
"""Если значения словаря изменяются, следует использовать функцию deepcopy()"""
"""Сравниваем словари. Словари можно сравнивать с помощью операторов == и !=. Другие операторы 
не будут работать. Python сравнивает ключи и значения по одному. Порядок, в котором они 
создавались, не имеет значения"""
a = {1: 1, 2: 2, 3: 3}
b = {3: 3, 1: 1, 2: 2}
# a == b  # True
"""Включения словарей. У словарей также существуют включения. Простейшая форма выглядит знакомо:
{выражение для ключа : выражение для значения for выражение in итерабельный объект}"""
word = 'letters'
letter_counts = {letter: word.count(letter) for letter in set(word)}
# letter_counts = {'e': 2, 't': 2, 's': 1, 'l': 1, 'r': 1}
"""По аналогии со списковыми включениями для генератора словарей также можно использовать 
условные проверки if и более одного блока for:
{выражение для ключа : выражение для значения for выражение in итерабельный объект if условие}"""
vowels = 'aeiou'
word_1 = 'onomatopoeia'
vowel_counts = {letter: word.count(letter) for letter in set(word_1) if letter in vowels}
#  vowel_counts = {'e': 2, 'o': 0, 'a': 0, 'i': 0}

"""Создаем множество с помощью функции set(). Чтобы создать множество, воспользуйтесь 
функцией set(). Можно также разместить в фигурных скобках одно или несколько разделенных
запятыми значений, как показано здесь:"""
empty_set = set()  # set()
even_numbers = {0, 2, 4, 6, 8}  # {0, 2, 4, 6, 8} <class 'set'>
"""Поскольку пустые квадратные скобки [] создают пустой список, можно было бы предположить, 
что пустые фигурные скобки {} создают пустое множество. Вместо этого пустые фигурные 
скобки создают пустой словарь. Именно поэтому интерпретатор выводит пустое множество 
как set() вместо {}. Почему так происходит? Словари появились в Python раньше и успели 
захватить фигурные скобки в свое распоряжение. А владение — это девять десятых законного права."""
what_are_we_create = {}  # {} <class 'dict'>
"""Вы можете создать множество из списка, строки, кортежа или словаря, отбрасывая любые 
повторяющиеся значения"""
# set('letters')                              # str -->   {'l', 'e', 'r', 't', 's'}
# set(['Cat', 'Dog', 'Bee', 'Mouse', 'Dog'])  # list -->  {'Bee', 'Cat', 'mouse', 'Dog'}
# set(('Mum', 'Dad', 'Mum', 'Sister'))        # tuple --> {'Dad', 'Sister', 'Mum'}
# set({'a': 'one','b': 'two','c': 'three'})   # dict -->  {'b', 'c', 'a'}
"""Добавляем элемент с помощью функции add()"""
# s = set((1, 2, 3))      # {1, 2, 3}
# s.add(4)                # {1, 2, 3, 4}
"""Удаляем элемент с помощью функции remove()"""
# s = set((1, 2, 3))      # {1, 2, 3}
# s.remove(3)             # {1, 2}
"""Проверяем на наличие значения с помощью оператора in"""
drinks = {'martini': {'vodka', 'vermouth'}, 'black russian': {'vodka', 'kahlua'},
          'white russian': {'cream', 'kahlua', 'vodka'},
          'manhattan': {'rye', 'vermouth', 'bitters'},
          'screwdriver': {'orange juice', 'vodka'}
          }
"""Какой из коктейлей содержит водку?"""
# [name for name, contents in drinks.items() if 'vodka' in contents]
# ['martini', 'black russian', 'white russian', 'screwdriver']
"""Мы хотим выпить коктейль с водкой, но не переносим лактозу, а вермут на вкус как керосин"""
# for name, contents in drinks.items():
#     if 'vodka' in contents and  not ('vermouth' in contents or 'cream' in contents):
#         print(name)  # black russian screwdriver
"""вы хотите найти какой-нибудь напиток с апельсиновым соком или вермутом. 
Для этого мы используем оператор пересечения множеств (&)"""
# for name, contents in drinks.items():
#     if contents & {'vermouth', 'orange juice'}:
#         print(name)  # martini manhattan screwdriver
"""перепишем пример из предыдущего подраздела, когда мы хотели водки, не смешанной
 со сливками или вермутом"""
# for name, contents in drinks.items():
#     if 'vodka' in contents and not contents & {'vermouth', 'cream'}:
#         print(name)     # black russian screwdriver
"""пересечение (элементы, общие для обоих множеств) можно получить с помощью особого 
пунктуационного символа &. Функция intersection() делает то же самое"""
a_1 = {1, 2}
b_1 = {2, 3}
# a_1 & b_1              # {2}
# a_1.intersection(b_1)  # {2}
bruss = drinks['black russian']  # {'vodka', 'kahlua'}
wruss = drinks['white russian']  # {'cream', 'kahlua', 'vodka'}
# bruss & wruss                       # {'kahlua', 'vodka'}
"""В следующем примере мы получаем объединение (члены обоих множеств), используя 
оператор | или функцию множества union()"""
# a_1 | b_1       # {1, 2, 3}
# a_1.union(b_1)  # {1, 2, 3}
# bruss | wruss   # {'cream', 'kahlua', 'vodka'}
"""Разность множеств (члены только первого множества, но не второго) можно получить с
 помощью символа — или функции difference():"""
# a_1 - b_1             # {1}
# a_1.difference(b_1)   # {1}
# bruss - wruss   # set()
# wruss – bruss   # {'cream'}
"""Самыми распространенными операциями с множествами являются объединение, пересечение и разность.
Для полноты картины я включил в этот подраздел и остальные операции, но, возможно, вам 
никогда не придется их использовать. Для выполнения исключающего ИЛИ (элементы или первого,
или второго множества, НО НЕ ОБЩИЕ) используйте оператор ^ или функцию symmetric_difference():"""
# a_1 ^ b_1                       # {1, 3}
# a_1.symmetric_difference(b_1)   # {1, 3}
# bruss ^ wruss   # {'cream'}
"""Проверить, является ли одно множество подмножеством другого (когда все члены первого 
множества являются членами второго), можно с помощью оператора <= или функции issubset():"""
# a_1 <= b_1         # False
# a_1.issubset(b_1)  # False
"""Добавление сливок в коктейль «Черный русский» сделает его «Белым русским», поэтому bruss
является подмножеством wruss"""
# bruss <= wruss       # True
"""Надмножество противоположно подмножеству (все члены второго множества являются также 
членами первого). Для определения этого используется оператор >= или функция issuperset():"""
# a_1 >= b_1           # False
# a_1.issuperset(b_1)  # False
# wruss >= bruss       # True
"""Включение множества. У множеств есть включения.
Простейшая версия выглядит как включение списка или словаря, которые вы только что видели:
{ выражение for выражение in итерабельный объект}
Здесь также могут быть необязательные проверки условий:
{ выражение for выражение in итерабельный объект if условие }"""
a_set = {number for number in range(1, 6) if number % 3 == 1}  # {1, 4}
"""Создаем неизменяемое множество с помощью функции frozenset()
Если вы хотите создать множество, которое нельзя будет изменить, вызовите функцию frozenset(),
передав в нее любой итерабельный аргумент:"""
fs = frozenset([3, 2, 1])  # fs = frozenset({1, 2, 3})
"""Достаточно ли «заморозилось» наше множество?"""
# fs.add(4)   # AttributeError: 'frozenset' object has no attribute 'add'
"""Да, множество хорошо «заморозилось»."""

# TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS   TASKS
"""8.1. Создайте англо-французский словарь с названием e2f и выведите его на экран.
Вот ваши первые слова: dog/chien, cat/chat и walrus/morse."""
e2f = {"dog": "chien", "cat": "chat", "walrus": "morse"}
###################################################################################################
"""8.2. Используя словарь e2f, выведите французский вариант слова walrus"""
# e2f['walrus']    # morse # in Aleksandr Shvec - design patterns
# print(*(value for key, value in e2f.items() if key in "walrus"))    # morse
###################################################################################################
"""8.3.Создайте французско-английский словарь f2e на основе словаря e2f. Используйте метод items."""
f2e = {value: key for key, value in e2f.items()}
# {'chien': 'dog', 'chat': 'cat', 'morse': 'walrus'}
###################################################################################################
"""8.4. Используя словарь f2e, выведите английский вариант слова chien."""
# f2e['chien']    # dog # in Aleksandr Shvec - design patterns
# print(*(value for key, value in f2e.items() if key in "chien"))    # dog
###################################################################################################
"""8.5. Выведите на экран множество английских слов из ключей словаря e2f."""
set(key for key, value in e2f.items())  # {'cat', 'walrus', 'dog'}
# set(e2f.keys()) # in Aleksandr Shvec - design patterns
###################################################################################################
"""8.6. Создайте многоуровневый словарь life. Используйте следующие строки для ключей верхнего 
уровня: 'animals', 'plants' и 'other'. Сделайте так, чтобы ключ 'animals' ссылался на другой 
словарь, имеющий ключи 'cats', 'octopi' и 'emus'. Сделайте так, чтобы ключ 'cats' ссылался 
на список строк со значениями 'Henri', 'Grumpy' и 'Lucy'. Остальные ключи должны ссылаться 
на пустые словари."""
life = {
    'animals': {'cats': ['Henri', 'Grumpy', 'Lucy'],
                'octopi': {},
                'emus': {}
                },
    'plants': {},
    'other': {}
}
###################################################################################################
"""8.7. Выведите на экран высокоуровневые ключи словаря life"""
# print(*(key for key in life))  # animals plants other
# print(list(life.keys()))       # in Aleksandr Shvec - design patterns ['animals', 'other', 'plants']
###################################################################################################
"""8.8. Выведите на экран ключи life['animals']"""
# print(*(key for key in life['animals']))     # cats octopi emus
# print(life['animals'].keys())                # in Aleksandr Shvec - design patterns ['cats', 'octopi', 'emus']
###################################################################################################
"""8.9. Выведите значения life['animals']['cats']."""
# print(life.get('animals').get('cats'))     # ['Henri', 'Grumpy', 'Lucy']
# print(life['animals']['cats'])             # in Aleksandr Shvec - design patterns ['Henri', 'Grumpy', 'Lucy']
###################################################################################################
"""8.10. Используйте генератор словаря, чтобы создать словарь squares. Используйте range(10), 
чтобы получить ключи. В качестве значений используйте возведенное в квадрат значение каждого ключа.
"""
squares = {x: x ** 2 for x in range(10)}
# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81}
###################################################################################################
"""8.11. Используйте генератор множества, чтобы создать множество odd из нечетных
чисел диапазона range(10)."""
odd = {number for number in range(10) if number % 2 == 1}    # {1, 3, 5, 7, 9}
###################################################################################################
"""8.12. Используйте включение генератора, чтобы вернуть строку 'Got ' и числа из диапазона 
range(10). Итерируйте по этой конструкции с помощью цикла for."""
# print(*(f'Got {x}' for x in range(10)))
###################################################################################################
"""8.13. Используйте функцию zip(), чтобы создать словарь из кортежа ключей keys и кортежа 
значений values."""
keys = ('optimist', 'pessimist', 'troll')
values = ('The glass is half full', 'The glass is half empty', 'How did you get a glass?')
dict(zip(keys, values))
# {
#     'optimist': 'The glass is half full',
#     'pessimist': 'The glass is half empty',
#     'troll': 'How did you get a glass?'
# }
###################################################################################################
"""8.14. Используйте функцию zip(), чтобы создать словарь с именем movies, в котором объединены 
списки titles и plots.
"""
titles = ['Creature of Habit', 'Crewel Fate', 'Sharks Ona Plane']
plots = ['A nun turns into a monster', 'A haunted yarn shop', 'Checkyour exits']
movies = dict(zip(titles, plots))
# {
#     'Creature of Habit': 'A nun turns into a monster',
#     'Crewel Fate': 'A haunted yarn shop',
#     'Sharks Ona Plane': 'Checkyour exits'
# }
